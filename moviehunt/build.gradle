import org.moallemi.gradle.internal.VersionCodeType

apply plugin: 'com.android.application'
apply plugin: 'realm-android'
apply plugin: 'org.moallemi.advanced-build-version'

advancedVersioning {
    codeOptions {
        versionCodeType VersionCodeType.DATE
    }

    nameOptions {
        versionMajor 0
        versionMinor 1
        versionPatch 0
    }

    outputOptions {
        renameOutput false
        nameFormat '${appName}-${buildType}-${versionName}'
    }
}

def API_KEY
def localProperties = file('../local.properties')
if (localProperties.exists() && localProperties.canRead()) {
    Properties prop = new Properties()
    prop.load(new FileInputStream(localProperties))
    if (prop["API_KEY"] == null || prop["API_KEY"].isEmpty()){
        throw new GradleException('Please add your api key in the local.properites file as follow: API_KEY="YOUR_API_KEY"')
    }
    API_KEY = prop['API_KEY']
} else throw new GradleException('local.properties file cannot be found or read, please create a local.properties file the project root and try again')


android {
    compileSdkVersion 27

    defaultConfig {
        applicationId "hr.murielkamgang.xmdb"
        minSdkVersion 15
        targetSdkVersion 27
        versionCode advancedVersioning.versionCode
        versionName advancedVersioning.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        buildConfigField("String", "API_KEY", API_KEY)

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def separator = "-"
            def newApkName = output.outputFile.name.replace(".apk",separator + variant.versionName + ".apk")
            outputFileName = new File(newApkName)
        }
    }

    lintOptions {
        abortOnError false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    configurations.all {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:1.3.9'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:27.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'

    //Android Support
    compile 'com.android.support:appcompat-v7:27.1.0'
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:design:27.1.0'
    compile 'com.android.support:support-v4:27.1.0'
    compile 'com.android.support:recyclerview-v7:27.1.0'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'

    //ButterKnife
    compile 'com.jakewharton:butterknife:8.8.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'

    // picasso
    compile 'com.squareup.picasso:picasso:2.71828'
    compile 'jp.wasabeef:picasso-transformations:2.2.1'

    //API
    compile 'com.squareup.retrofit2:retrofit:2.3.0'
    compile 'com.squareup.retrofit2:converter-gson:2.3.0'
    compile 'com.squareup.okhttp3:logging-interceptor:3.8.1'

    //RXJava
    compile "io.reactivex.rxjava2:rxjava:2.1.7"
    compile 'io.reactivex.rxjava2:rxandroid:2.0.1'

    // Log
    dependencies {
        compile 'org.slf4j:slf4j-api:1.7.21'
        compile 'com.github.tony19:logback-android:1.1.1-8'
    }

    //Dagger
    compile 'com.google.dagger:dagger:2.14.1'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.14.1'
    compile 'com.google.dagger:dagger-android:2.14.1'
    compile 'com.google.dagger:dagger-android-support:2.14.1' // if you use the support libraries
    annotationProcessor 'com.google.dagger:dagger-android-processor:2.14.1'

}
